
import numpy as np

import matplotlib.pyplot as plt
from cvxpy import *

def generate_packets(user_num=[1,1,1,1,1,1,1,1,1,1,1,1,1,1],packet_len=[1,1,1,1,1,1,1,1,1,1,1,1,1,1],how_long=5,grind=4):
	# user_num is number of users on each ZigBee channel
	# packet_len is the length of each Zigbee channel
	# how_long is how long time this simulation runs
	RSSI=[]
	intervals=[53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149]

	#intervals=[11,13,17,19,23,31,37,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163];
	interval1=[17,31,47,89,109,101,103,107]
	interval2=[19,37,53,97,139,127,131,137]
	interval3=[23,43,59,113,149,151,157,163]
	#starts=np.random.randint(interval[0],size=14)
	#start=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	data=[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]
	#data=np.random.randint(5,size=16)
	RSSI_channel=[]
	for channel in range(len(user_num)):
		num=user_num[channel]
		temp=np.zeros(int(1000*how_long*grind*packet_len[channel]))
		already=[]
		for i in range(num):
			signal_energy=np.random.random_sample()*0.01
			#start=np.random.randint(100*grind*packet_len[channel]);
			overlap=True
			print channel,i,already
			while overlap:
				start=np.random.randint(100*grind*packet_len[channel]);
				overlap=False
				
				for ss in already:
					overlap= overlap or ( start>=ss-packet_len[channel]*grind and start <= ss+packet_len[channel])
				print overlap, start,already
			already.append(start)



			for j in range(int(1000*how_long*grind*packet_len[channel])):
				if j>=start:
					if (j-start)%(intervals[i]*grind*packet_len[channel])==0:
						for k in range(grind*packet_len[channel]):
							if j+k<int(1000*how_long*grind*packet_len[channel]) and temp[j+k]==0:
								temp[j+k]=signal_energy+0.01;
					if (j-start-data[i]*grind*packet_len[channel])%(intervals[i]*grind*packet_len[channel])==0:
						for k in range(grind*packet_len[channel]):
							if j+k<int(1000*how_long*grind*packet_len[channel]) and temp[j+k]==0:
								temp[j+k]=signal_energy+0.01;
		RSSI_channel.append(list(temp))
	for time in range(int(1000*how_long*grind*packet_len[0])):
		temp=[];
		for i in range(len(user_num)):
			temp.append(RSSI_channel[i][time])
		RSSI.append(temp)
	return RSSI

def shrink(signal,granularity,packet_len,output_granularity):
	result=[]
	index=0
	while index<len(signal):
		temp=[0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		print index
		for i in range(int(packet_len*output_granularity/granularity)):
			for ii in range(14):
				if signal[index+i][ii]>=0.0001:
					temp[ii]=1
		index+=int(packet_len*output_granularity/granularity)
		result.append(temp)
	return result

## old version
def switch_sense(start,signal,magnification,granularity,delay,output_granularity):
	# this function would sample on "Signal" with "delay". Each sample would be gotten by sensing energy and switching channels
	# The metric of granularity and delay is millisecond
	index=start
	mask=[0,1,2,3,4,5,6,7,8,9,10,11,12,13]
	energy=[]
	sample_matrix=[]
	column=14*len(signal)*granularity/(magnification*output_granularity);
	now=0
	sampled={}
	while now<len(signal)*granularity-delay:
		
		now=index*delay
		temp=np.zeros(column)
		channels=mask[index%11:index%11+4]
		sum=0
		index+=1
		output_index=int(now/(magnification*output_granularity))
		if sampled.get(output_index)==None:
			sampled[output_index]=1
		else:
			if sampled[output_index]<11:
				sampled[output_index]+=1
			else:
				continue

		for ZigBee_channel in channels: 
			sum+=signal[int(now/granularity)][ZigBee_channel]
			temp[14*int(now/(magnification*output_granularity))+ZigBee_channel]=1
		energy.append(sum)
		sample_matrix.append(temp)
		print now
		
	return np.matrix(sample_matrix),np.matrix(energy)



def switch_sense(sync_start,start,packet_len,signal,magnification,granularity,delay,output_granularity):
	# new version
	# this function would sample on "Signal" with "delay". Each sample would be gotten by sensing energy and switching channels
	# The metric of granularity and delay is millisecond
	index=start
	#packet_len=0.7
	mask=[0,1,2,3,4,5,6,7,8,9,10,11,12,13]
	energy=[]
	sample_matrix=[]
	new_matrix=[]
	column=14*len(signal)*granularity/(magnification*output_granularity);
	now=0
	sampled={}
	sync_index=sync_start
	sync_matrix=[]
	sync_count=0
	real_sync=[]
	while now<len(signal)*granularity-delay:
		
		now=index*delay
		temp=np.zeros(column)
		tep=np.zeros(14)
		channels=mask[index%11:index%11+4]
		sum=0
		index+=1
		output_index=int(now/(magnification*output_granularity))
		if sampled.get(output_index)==None:
			sampled[output_index]=1
		else:
			if sampled[output_index]<11:
				sampled[output_index]+=1
			else:
				continue

		for ZigBee_channel in channels: 
			sum+=signal[int(now/granularity)][ZigBee_channel]
			temp[14*int(now/(magnification*output_granularity))+ZigBee_channel]=1
			tep[ZigBee_channel]=1
		
		# construct sync matrix	
		if now-sync_index*packet_len>0 and now-sync_index*packet_len<delay+0.001:
			sync_temp=np.zeros(len(signal))
			sync_t=np.zeros(len(signal))
			sync_t[index]=1
			real_sync.append(sync_t)
			print sync_t
			for i in range(sync_count):
				sync_temp[index-i]=1
			sync_matrix.append(sync_temp)

			sync_index+=1
			sync_count=1;
		else:
			sync_count+=1
			sync_temp=np.zeros(len(signal))
			sync_matrix.append(sync_temp)
			real_sync.append(sync_temp)

		print sync_count

		energy.append(sum)
		sample_matrix.append(temp)
		new_matrix.append(tep)
		print now,now-sync_index*packet_len,sync_index,now-sync_index*packet_len>0,now-sync_index*packet_len<=delay
		
	return np.matrix(sample_matrix),np.matrix(energy),np.matrix(new_matrix),np.matrix(sync_matrix),np.matrix(real_sync)


def reform(channel_num,result):
	#vv=result.value
	temp=result.transpose().tolist()[0]
	res=[]
	for k in range(len(temp)/channel_num):
		tt=[]
		for i in range(channel_num):
			tt.append(temp[k*channel_num+i])
		res.append(tt)
	return res


def enlarge(ZigBee):
	result=[]
	for item in ZigBee:
		temp=[]
		for signal in item:
			temp.append(signal)
		result.append(temp)
		result.append(temp)
		result.append(temp)
	return result


def diff(z1,z2):
	import numpy as np
	error=0
	correct=0
	non_zero_correct=0
	all=0;
	raw_correct=0
	b_positive=0;

	for item in range(len(z1)):
		for ii in range(len(z1[item])):
			if z1[item][ii]<=0.0001:
				z1[item][ii]=0
			else:
				z1[item][ii]=1
	for item in range(len(z2)):
		for ii in range(len(z2[item])):
			if z2[item][ii]<=0.0001:
				z2[item][ii]=0
			else:
				z2[item][ii]=1
	for i in range(min(len(z1),len(z2))):
		for index in range(len(z1[i])):
			all+=1
			a=z1[i][index]
			b=z2[i][index]
			if b!=0:
				b_positive+=1
			if a!=0:
				raw_correct+=1
			if a!=0 and b!=0 :
				non_zero_correct+=1
			if a==b:
				correct+=1
	return all,raw_correct,correct,non_zero_correct,b_positive


def cal(u_num):
	res=[]
	for i in range(14):
		res.append(u_num)
	return res

def generate_sync(start,sample_num,length):
	result=[]
	real_sync=np.eye(length)
	for index in range(length):
		temp=np.zeros(length)
		if (index - start )% sample_num==0:
			sync_index=int(index/sample_num)
			for i in range(sample_num):
				temp[sync_index*sample_num+i]=1
		else:
			real_sync[index][index]=0
		result.append(temp)

	return np.matrix(result),real_sync
def generate_sync(start,sample_num,length):
	result=np.zeros((length,length))
	real_sync=np.zeros((length,length))
	for i in range(length):
		if (i-start)%sample_num==0:
			print i
			real_sync[i,i]=1
			if i+sample_num>length:
				break;
			for j in range(sample_num):
				result[i,i+j]=1

	return result,real_sync




def ext(delay,packet_len,signal_len):
	row_num=int(signal_len/(packet_len/delay))
	result=[]
	for i in range(row_num):
		temp=np.zeros(signal_len)
		for j in range(int(packet_len/delay)):
			temp[i*int(packet_len/delay)+j]=1
		result.append(temp)
	return np.matrix(result)

def weave(potential,error):
	result=[]
	result=potential[0][:]
	for i in range(1,len(error)):
		print i 
		if error[i]<=0.04:
			print error[i]
			for index in range(len(result)-len(potential[i]),len(result)):
				result[index]=potential[i][index-(len(result)-len(potential[i]))][:]
			result.append(potential[i][len(potential[i])-1][:])
		#else:

	return result


def average_signal(signal,window):
	average=[]
	variance=[]

	for ss in signal:
		temp_avg=[]
		temp_var=[]
		for i in range(len(ss)-window):
			t_avg=sum(ss[i:i+window])*1.0/window

			temp_avg.append(t_avg)
			t_var=0
			for item in ss[i:i+window]:
				t_var+=(item-t_avg)*(item-t_avg)
			t_var=t_var/window
			temp_var.append(t_var)
		average.append(temp_avg)
		variance.append(temp_var)
	return average,variance


signal=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.011541879629222769,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.0,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.01232544764295598,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.012429136006070953,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.016671744325474157,
  0.0,
  0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.018943381169137987,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.014317408841922206,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.019364821553738885,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.010431185745473253],
 [0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,
  0.0,0.010431185745473253]]



ZigBee=generate_packets(user_num=cal(5),packet_len=cal(1),how_long=5,grind=20)


f, axarr = plt.subplots(3, sharex=True)

a=np.matrix(signal)

a=a.transpose().tolist()

avg,var=average_signal(a,22)

axarr[0].imshow(a)
axarr[0].set_title('original signal')
axarr[1].imshow(avg)
axarr[1].set_title('average')
axarr[2].imshow(var)
axarr[2].set_title('variance')


plt.show()

signal=[[1,1,1,1,1,1,1,1],[0,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]]

ss=np.matrix(signal)
ss=ss.transpose().tolist()


sense=[[1,1,0],[0,1,1],[1,1,0],[0,1,1],[1,1,0],[0,1,1],[1,1,0],[0,1,1]]

for i in range(4):
	zz=np.matrix(ss[i:i+4])
	zz=zz.transpose()
	energy=np.diagonal(np.matrix(sense[i:i+4])*zz)

	x=Variable(3,4)
	objective=Minimize(norm1(x))
	constraints=[x>=0,diag(np.matrix(sense[i:i+4])*x)==energy]

	prob=Problem(objective,constraints)
	differnece=prob.solve()
	print x.value










signal=ZigBee[100:300]


mat,energy,new,sync_matrix,real_sync=switch_sense(sync_start=0,start=0,packet_len=1,signal=signal,magnification=1,granularity=0.05,delay=0.05,output_granularity=0.05)


# moving packet window
energy=energy.transpose()
e1=np.ones(11)
#e1=e1.transpose()
e1=np.matrix(e1)
e1.shape
x=Variable(14,1)
diff=[]
error=[]

potential=[]

result=[]

for i in range(200-11):
	objective=Minimize(norm1(diag(new[i:i+11]*x*e1)-energy[i:i+11]))
	constraints=[x>=0]

	prob=Problem(objective,constraints)
	differnece=prob.solve()
	diff.append(differnece)
	print i,differnece
	result.append(x.value.transpose().tolist()[0])

	#a=np.matrix.diagonal(new[i:i+20]*result*e1)
	#aa=energy[i:i+20].transpose()

#	difference=(a-aa).tolist()
#	error.append(difference[0])
	#plt.figure()
	#plt.imshow(x.value*e1)
	potential.append((x.value*e1).transpose().tolist())


def weave(potential,error):
	result=[]
	result=potential[0][:]
	for i in range(1,len(error)):
		print i 
		if error[i]<=0.01:
			print error[i]
			for index in range(len(result)-len(potential[i]),len(result)):
				result[index]=potential[i][index-(len(result)-len(potential[i]))][:]
			result.append(potential[i][len(potential[i])-1][:])
	return result

rr=np.matrix(result)

rr=rr.transpose()

ww=weave(potential,diff)

ww=np.matrix(ww)

ww=ww.transpose()
f, axarr = plt.subplots(3, sharex=True)

a=np.matrix(signal) 

a=a.transpose().tolist()
axarr[0].imshow(a)
axarr[0].set_title('original signal')
axarr[1].imshow(rr)
axarr[1].set_title('reconstructed signal')
axarr[2].plot(diff)
axarr[2].set_title('gap')






f, axarr = plt.subplots(4, sharex=True)

a=np.matrix(signal) 

a=a.transpose().tolist()
axarr[0].imshow(a)
axarr[0].set_title('original signal')
axarr[1].imshow(rr)
axarr[1].set_title('reconstructed signal')
axarr[2].plot(diff)
axarr[2].set_title('gap')
axarr[3].imshow(ww)
axarr[3].set_title('After correction')


plt.show()

